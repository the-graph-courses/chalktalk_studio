export async function POST(request: Request) {
  try {
    let body = {};
    try {
      const text = await request.text();
      if (text) {
        body = JSON.parse(text);
      }
    } catch {
      // Ignore JSON parsing errors, use empty body
    }
    const {
      projectId = 'project_xemtydcq0f_1757338119773',
      name = 'AI Test Slide',
      content = `
        <div style="position: relative; width: 800px; height: 500px; margin: 70px auto 0; background: linear-gradient(135deg, #7f7fd5, #86a8e7, #91eae4); color: white; border-radius: 12px; box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1); overflow: hidden;">
          <h1 style="position: absolute; top: 40px; left: 40px; font-size: 48px; font-weight: 700;">AI Generated Test</h1>
          
          <p style="position: absolute; top: 120px; left: 40px; font-size: 22px; max-width: 500px; line-height: 1.5;">This slide was generated by the test suite and uses absolute positioning for all elements.</p>
          
          <div data-type-icon class="gjs-icon" style="position: absolute; bottom: 40px; right: 40px; width: 100px; height: 100px;">
            <svg style="width: 100%; height: 100%;" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <path d="M12 2L2 7l10 5 10-5-10-5zM2 17l10 5 10-5M2 12l10 5 10-5"></path>
            </svg>
          </div>
        </div>
        
        <style>
          body { 
            position: relative;
            background: linear-gradient(135deg, #f5f7fa, #c3cfe2);
            font-family: system-ui, -apple-system, sans-serif; 
            overflow: hidden;
          }
          .gjs-icon {
            display: inline-block;
            vertical-align: middle;
            fill: currentColor;
            position: relative;
          }
        </style>
      `,
      insertAtIndex
    } = body;

    const response = await fetch(`${process.env.NEXTJS_URL || 'http://localhost:3000'}/api/ai/tools`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        toolName: 'generate_slide',
        parameters: { name, content, insertAtIndex },
        projectId,
      }),
    });

    const result = await response.json();

    return Response.json({
      test: 'generate_slide',
      projectId,
      slideName: name,
      insertAtIndex,
      success: result.success,
      result,
      timestamp: new Date().toISOString(),
    });
  } catch (error) {
    console.error('Generate slide test error:', error);
    return Response.json({
      test: 'generate_slide',
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 });
  }
}
