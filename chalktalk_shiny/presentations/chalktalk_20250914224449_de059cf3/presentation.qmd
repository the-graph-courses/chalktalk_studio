---
title: "chalktalk Demo"
format: 
    revealjs:
        theme: moon
---

## CHalktalk: Using AI to Create Tutorials

::: {.fragment tts="Hello everyone! My name is Kene David Nwosu, and I'll be talking about CHalkTalk - using AI to create tutorials."}
**Kene David Nwosu**  
Curriculum Director, The Graph Courses
:::

::: {.fragment tts="The most important thing you should know about me is that package updates give me nightmares."}
📦 Package updates give me nightmares 😱
:::

## The ggplot2 3.4.0 Crisis

::: {.fragment tts="Here's one example from November 2022. From my perspective, the most important thing that happened that month was this: ggplot2 version 3.4.0 was released."}
November 2022: ggplot2 v3.4.0 released
:::

::: {.fragment tts="Why was this a big deal? The linewidth aesthetic replaced size as the way to determine the thickness of lines."}
**Breaking change:** `size` → `linewidth` for line thickness
:::

::: {.fragment tts="So when you use the old size parameter, you get a big warning in R."}
```{r}
#| echo: true
#| eval: false
# Old way (now shows warning)
ggplot(data) + geom_line(aes(size = 2))

# New way
ggplot(data) + geom_line(aes(linewidth = 2))
```
:::

## Why This Is a Problem for Me

::: {.fragment tts="I'm the curriculum director at an organization called The Graph Courses. We teach data science with R and Python."}
🎓 **The Graph Courses**
- Data science education in R & Python
:::

::: {.fragment tts="We have 4,000 students in self-paced courses and 500 students in our live 8 to 12 week bootcamps."}
📊 **Our Scale:**
- 4,000 students in self-paced courses
- 500 students in live 8-12 week bootcamps
:::

::: {.fragment tts="Our courses are recognized for PhD credits at a growing list of universities."}
🏆 Recognized for PhD credits at universities
:::

## The Video Update Problem

::: {.fragment tts="One of our main instructional formats are recorded videos. So when there's a package update like ggplot 3.4.0, we have to update our tutorials."}
🎥 Main format: Recorded video tutorials
:::

::: {.fragment tts="What I need to do is reach out to Joy, who recorded our ggplot video on line charts, saying 'Joy, we have an update. No longer size, now linewidth.'"}
📧 "Joy, we need to update the video..."
:::

::: {.fragment tts="But Joy is probably going to respond like 'Oh my god, really??' Because here's what it looks like to update even a 1-minute portion of video."}
Joy: "Oh my god, really??" 😩
:::

## The Video Update Process

::: {.fragment tts="First, plan the change. Set up camera, set up heavy microphone, set up adapters."}
📹 **Step 1:** Setup (camera, microphone, adapters)
:::

::: {.fragment tts="Record, often with lots of mistakes. Spend minutes to hours editing out and tidying up mistakes."}
🎬 **Step 2:** Record (with mistakes) + Edit
:::

::: {.fragment tts="Then try to splice it in. Actually, we probably should just re-record the entire video. But that would take even longer."}
✂️ **Step 3:** Splice or re-record everything
:::

::: {.fragment tts="Indeed, video recording is one of the more tedious and time-consuming parts of our job."}
⏰ Result: Extremely time-consuming
:::

## The Current Reality

::: {.fragment tts="So you won't be surprised to know that we still have not updated the video yet."}
❌ **Status:** Still not updated
:::

::: {.fragment tts="So students are still getting this warning when following our tutorials."}
⚠️ Students still see warnings in tutorials
:::

## Enter AI: The Solution

::: {.fragment tts="Starting about last year, as AI advancements were coming along, I started thinking: what if AI can help me automate away this tedious part of our job?"}
💡 **Idea:** What if AI could automate video updates?
:::

::: {.fragment tts="LLMs are getting very good. While not yet great at writing lessons from scratch, they're actually very good at reformatting or updating existing content."}
🤖 **LLMs:** Great at updating existing content
:::

::: {.fragment tts="And text-to-speech has improved dramatically. A few years ago it sounded robotic, but now it sounds pretty good."}
🗣️ **TTS:** Now sounds natural and human-like
:::

## The Vision

::: {.fragment tts="So I was thinking: could we combine LLMs and TTS to make an automated lesson tutorial video creator app?"}
🎯 **Vision:** LLMs + TTS = Automated tutorial creator
:::

::: {.fragment tts="But on our team we have lots of data scientists, not a lot of app developers."}
👥 **Challenge:** Data scientists ≠ App developers
:::

::: {.fragment tts="But there's a third AI trend this year: the rise of AI-assisted coding. LLM plus execution means supposedly non-software developers can build apps."}
💻 **Solution:** AI-assisted coding for non-developers
:::

## The 4-Week Challenge

::: {.fragment tts="So I figured I should be able to try to work on this. Coincidentally, Posit Conf was coming up, so I could submit and try to build it."}
🗓️ **Timeline:** 4 weeks to build for Posit Conf
:::

::: {.fragment tts="The motivating question: can I AI-assist code this thing in 4 weeks?"}
❓ **Question 1:** Can I build this in 4 weeks with AI?
:::

::: {.fragment tts="And maybe a related second question: if I can actually do this, what does it mean for the future of programming?"}
❓ **Question 2:** What does this mean for programming's future?
:::

## Demo Time

::: {.fragment tts="Well, it's 4 weeks later. Let's see what I have. I know Posit said not to do live demos, so I have a backup video, but let's try anyway."}
🎬 **Demo:** Let's see what we built!
:::

::: {.fragment tts="We'll take existing content from our website and paste it into ChalkTalk, asking it to generate an 8-slide tutorial on this content, but replace the size aesthetic with linewidth."}
📝 **Process:** Paste content → Generate slides → Update aesthetic
:::

::: {.fragment tts="We're currently using an open-source model called Qwen running super fast on Cerebras infrastructure."}
⚡ **Tech:** Qwen model on Cerebras (super fast)
:::

## The Magic Happens

::: {.fragment tts="We watch the model generate slides, then press a button to get audio generated using ElevenLabs, which has the best quality, though it's a bit expensive."}
🎵 **Audio:** ElevenLabs TTS (high quality, pricey)
:::

::: {.fragment tts="And then we can press present to present the generated tutorial."}
▶️ **Result:** Automated presentation ready!
:::

::: {.fragment tts="The nice thing is I can edit the content myself - the slides and the script being spoken - allowing me to regenerate as needed."}
✏️ **Editing:** Full control over slides and script
:::

## What We Achieved

::: {.fragment tts="So as you can see, this was somewhat possible, though of course not 100% perfect."}
✅ **Success:** Working MVP achieved!
:::

::: {.fragment tts="All the code is open-source. You can check it out at our GitHub repository."}
📂 **Open Source:** github.com/the-graph-courses/chalktalk_studio
:::

::: {.fragment tts="And if you want to use our infrastructure, we'll soon have a demo live, so go to chalktalk.studio to sign up for the waitlist."}
🌐 **Try it:** chalktalk.studio (coming soon)
:::

## Current Limitations

::: {.fragment tts="Some things I cannot yet build: no Quarto extension yet, so we can't run R code in the process of rendering the video."}
❌ **Missing:** Quarto extension for R code execution
:::

::: {.fragment tts="No avatar, no pointing functionality that good tutorials need for directing student attention."}
❌ **Missing:** Avatars and pointing features
:::

::: {.fragment tts="Planning to add SVG support but not there yet, so it's hard to do diagrams."}
❌ **Missing:** SVG support for diagrams
:::

## Lessons Learned: App Development vs Data Science

::: {.fragment tts="App development is easier for AI-assisted coding than data science because of the hallucination problem."}
🎯 **Lesson 1:** Apps easier than data science for AI coding
:::

::: {.fragment tts="In data science, you need to be careful writing validation tests. For simple GUI apps, you can just look and see if it does what you want."}
👀 **Why:** Visual validation vs complex testing
:::

::: {.fragment tts="So for those in data science who are concerned about AI-assisted coding, I strongly recommend trying it for apps."}
💡 **Recommendation:** Try AI coding for apps first
:::

## Lessons Learned: Rapid Improvement

::: {.fragment tts="The speed of improvement of these models is quite fast. Something that didn't work a few months ago works now."}
🚀 **Lesson 2:** Models improve incredibly fast
:::

::: {.fragment tts="Over these few weeks, the best practices switched from Cursor to Claude, then new CLI tools came out, each representing a significant jump."}
🔄 **Evolution:** Cursor → Claude → New tools (rapid changes)
:::

::: {.fragment tts="So if you've tried something in the past and it didn't work, do try again."}
🔁 **Advice:** Retry failed attempts - they might work now
:::

## Lessons Learned: Iteration is Cheap

::: {.fragment tts="If at first you don't succeed, try 19 more times. Iteration is cheap with models."}
🔄 **Lesson 3:** Iterate freely - it's cheap!
:::

::: {.fragment tts="Some things that didn't work the first time work after another try. In Cursor, you can just hit a button to go back."}
↩️ **Practice:** Easy rollback and retry
:::

::: {.fragment tts="There's also a fabulous thing called git worktrees that let you have multiple models working independently."}
🌳 **Tool:** Git worktrees for parallel development
:::

## Future Possibilities

::: {.fragment tts="Based on this, I want to recommend you do more AI-assisted coding. Here are some ideas we have."}
💡 **Recommendation:** Try more AI-assisted coding
:::

::: {.fragment tts="Most of our quizzes look boring. Can we code up actual fun games instead?"}
🎮 **Idea:** Transform boring quizzes into fun games
:::

::: {.fragment tts="Though there are some important caveats to keep in mind."}
⚠️ **Note:** Important limitations to consider
:::

## Caveat: Size Matters

::: {.fragment tts="Smaller apps are more likely to work. Big repositories with hundreds of thousands of lines are hard for models to reason about."}
📏 **Caveat 1:** Smaller apps work better
:::

::: {.fragment tts="Models have context length limitations and reasoning degrades over large codebases."}
🧠 **Why:** Context limits + reasoning degradation
:::

## Caveat: Open Source Advantage

::: {.fragment tts="Open source libraries are better understood than your own internal codebase. Models are trained on open source code."}
🌐 **Caveat 2:** Open source > internal code
:::

::: {.fragment tts="Our GUI is built on open source Grape.js and Reveal.js. Because they're open source with many packages built on them, models are fluent in them."}
📚 **Example:** Grape.js + Reveal.js (well-known to models)
:::

::: {.fragment tts="But when I unleash models on our large internal codebases, they're not as good because they need to store all this information in short-term context."}
🔒 **Problem:** Internal codebases lack training data
:::

## Programming Fundamentals Still Matter

::: {.fragment tts="Programming 101 is still important. Code knowledge is still important. Even though I introduced myself as a data scientist, I spent quite a few hours going through web development tutorials."}
📖 **Caveat 3:** Fundamentals still essential
:::

::: {.fragment tts="You still need to be able to specify what you want from the model and understand what the model gives you."}
🎯 **Skills needed:** Specification + comprehension
:::

::: {.fragment tts="Also, there are still quite a few last-mile problems where models trip up. One current issue is working with authentication keys."}
🔑 **Limitation:** Auth and other last-mile problems
:::

## The Calculator Analogy

::: {.fragment tts="Going back to the question of whether it's worth still learning linewidth, I liken this to the calculator."}
🧮 **Analogy:** AI coding = calculator for math
:::

::: {.fragment tts="Should we still teach children arithmetic when there are calculators that can do operations a million times faster?"}
❓ **Question:** Teach basics when tools exist?
:::

::: {.fragment tts="Well, yeah. They need to know the basics to understand what to put into the calculator and understand what comes out."}
✅ **Answer:** Yes - need basics for input/output understanding
:::

## Conclusion: Both Questions Answered

::: {.fragment tts="So the answer to my two questions: Yes, AI tooling is good enough to help me build this thing I dreamed about."}
✅ **Answer 1:** AI can help build dream applications
:::

::: {.fragment tts="And yes, it's still worth building it, because even as AIs get smarter and do more of our coding, understanding the underlying language they use will remain important."}
✅ **Answer 2:** Still worth learning - fundamentals remain crucial
:::

## Get Involved

::: {.fragment tts="If you want to keep tabs on us, here's the link to chalktalk.studio for our upcoming demo."}
🌐 **Try ChalkTalk:** chalktalk.studio
:::

::: {.fragment tts="Here's the link to our organization's website. We teach R, Python, and increasingly generative AI content."}
📚 **Learn with us:** thegraphcourses.org
:::

::: {.fragment tts="Thanks everyone! I think I'll take questions if there's still time."}
🙏 **Thank you!** Questions?
:::